generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(35)
  email      String   @unique
  password   String
  token      String?
  goal       String?  @db.VarChar(255)
  dailyTime  Int?
  totalHours Int      @default(0)
  createdAt  DateTime @default(now())

  StudyPlans StudyPlans[]
  Subjects   Subjects[]
  Activities Activities[]
  Reviews    Reviews[]
}

model StudyPlans {
  id         String          @id @default(uuid())
  userId     String
  name       String          @db.VarChar(55)
  startDate  DateTime
  endDate    DateTime?
  goal       String          @db.VarChar(255)
  hoursGoal  Int             @default(0)
  hoursSpent Int             @default(0)
  status     StudyPlanStatus @default(ACTIVE)
  createdAt  DateTime        @default(now())

  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlanSubjects PlanSubjects[]
}

model Subjects {
  id          String   @id @default(uuid())
  userId      String
  name        String   @db.VarChar(35)
  description String   @db.VarChar(255)
  timeSpent   Int      @default(0)
  color       String
  createdAt   DateTime @default(now())

  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Topics       Topics[]
  Activities   Activities[]
  PlanSubjects PlanSubjects[]
}

model PlanSubjects {
  id          String   @id @default(uuid())
  studyPlanId String
  subjectId   String
  priority    Int      @default(0) @map("priority_level")
  hoursTarget Int?     @default(0)
  createdAt   DateTime @default(now())

  StudyPlans StudyPlans @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  Subjects   Subjects   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Topics {
  id          String   @id @default(uuid())
  subjectId   String
  name        String   @db.VarChar(35)
  description String   @db.VarChar(255)
  timeSpent   Int      @default(0)
  createdAt   DateTime @default(now())

  Subjects   Subjects     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Activities Activities[]
}

model Activities {
  id                  String    @id @default(uuid())
  userId              String
  subjectId           String
  topicId             String
  startDate           DateTime
  studyTime           Int
  questionsDone       Int?
  questionsCorrect    Int?
  scheduledReviewDate DateTime?
  createdAt           DateTime  @default(now())

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subjects Subjects @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Topics   Topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  Reviews  Reviews?
}

model Reviews {
  id             String       @id @default(uuid())
  userId         String
  activityId     String       @unique
  timesReviewed  Int          @default(0)
  lastReviewedAt DateTime
  nextReviewAt   DateTime
  status         ReviewStatus @default(PENDING)
  createdAt      DateTime     @default(now())

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Activities Activities @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

enum StudyPlanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ReviewStatus {
  PENDING
  COMPLETED
  SKIPPED
}
