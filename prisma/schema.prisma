generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String       @db.VarChar(35)
  email      String       @unique
  password   String
  token      String?
  goal       String?      @db.VarChar(255)
  dailyTime  Int?
  totalHours Int          @default(0)
  createdAt  DateTime     @default(now())
  Activities Activities[]
  Reviews    Reviews[]
  StudyPlans StudyPlans[]
  Subjects   Subjects[]
}

model StudyPlans {
  id           String          @id @default(uuid())
  userId       String
  name         String          @db.VarChar(55)
  startDate    DateTime
  endDate      DateTime?
  goal         String          @db.VarChar(255)
  hoursGoal    Int             @default(0)
  hoursSpent   Int             @default(0)
  status       StudyPlanStatus @default(ACTIVE)
  createdAt    DateTime        @default(now())
  PlanSubjects PlanSubjects[]
  User         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Subjects {
  id           String         @id @default(uuid())
  userId       String
  name         String         @db.VarChar(35)
  description  String?        @db.VarChar(255)
  timeSpent    Int            @default(0)
  color        String
  createdAt    DateTime       @default(now())
  Activities   Activities[]
  PlanSubjects PlanSubjects[]
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Topics       Topics[]

  @@unique([userId, name])
}

model PlanSubjects {
  id          String        @id @default(uuid())
  studyPlanId String
  subjectId   String
  hoursTarget Int?          @default(0)
  createdAt   DateTime      @default(now())
  priority    PriorityLevel @default(LOW) @map("priority_level")
  StudyPlans  StudyPlans    @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  Subjects    Subjects      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Topics {
  id          String       @id @default(uuid())
  subjectId   String
  name        String       @db.VarChar(35)
  description String       @db.VarChar(255)
  timeSpent   Int          @default(0)
  createdAt   DateTime     @default(now())
  Activities  Activities[]
  Subjects    Subjects     @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([subjectId, name])
}

model Activities {
  id                  String    @id @default(uuid())
  userId              String
  subjectId           String
  topicId             String
  startDate           DateTime
  studyTime           Int
  questionsDone       Int?
  questionsCorrect    Int?
  scheduledReviewDate DateTime?
  createdAt           DateTime  @default(now())
  Subjects            Subjects  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Topics              Topics    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  User                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reviews             Reviews?
}

model Reviews {
  id             String       @id @default(uuid())
  userId         String
  activityId     String       @unique
  timesReviewed  Int          @default(0)
  lastReviewedAt DateTime
  nextReviewAt   DateTime
  status         ReviewStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  Activities     Activities   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum StudyPlanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ReviewStatus {
  PENDING
  COMPLETED
  SKIPPED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
}
